What I've seen work is a combination of code reviews and ongoing continuing education.----- CODE REVIEW SIDE -----This can include automated tools, human interaction, and computer-assisted human interaction.  To start with, pick a set of command code standards and style guidelines.  Google has nice ones for many languages that you can use as a starting point (https://google-styleguide.googlecode.com/svn/trunk/).Secondly, enforce them through automated tools (e.g. in a Java shop, these might include PMD, FindBugs, Checkstyle, etc).  Have everyone install the IDE plugins for those tools (along with your common config).  Incorporate them into your continuous integration build process.  Perhaps put in place a static analysis tool like Sonar to send regular reports on code issues.The human element would start by having someone review committed code before it's allowed to be merged downstream.  Git's pull requests, along with diff view systems like GitHub's, make this easy... but you can use workable practices with Subversion or whatever also.There are limits to "pull request"-based code reviews, though.  When change sets grow too large, it's difficult for the reviewer to understand the high-level vision for the changes.  You start reviewing the trees, rather than the forest.  So I think you still need periodic in-person code reviews, to walk through the state of a codebase at certain milestones and discuss higher-level issues.----- CONTINUING EDUCATION SIDE -----The thing that I've seen work best here is a regular, ongoing lunch-and-learn type series.  Take any of the standard code quality treatises (e.g. "Pragmatic Programmer", "Code Complete", "Clean Code", etc), and tackle a chapter per week.  Better yet, split up the chapters and have the team members themselves present a chapter.  It's great experience for them (if they're not TOO freaked out by public speaking), and you'll never learn something as deeply as you do through the process of teaching it to others.The problem with lunch-n-learns is that you MUST have buy-in from management to make them a serious and ongoing part of your team culture.  When deadlines are tight and there are fires to put out (and when are there not?), a lot of companies are quick to cancel that week's lunch-n-learn.  When that happens, they lose traction and fall apart.