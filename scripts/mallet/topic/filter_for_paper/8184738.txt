I disagree, security can be estimated, scheduled and tracked to completion.\nIt's not magic, and while new attack vectors are still being discovered, Heartbleed is a very traditional vulnerability that static analysis should have caught - if someone were actually running the analysis.In fact, we don't know how long it actually took to find Heartbleed once Codenomicon and Google started looking. It might have been a weekend project for someone new to Codenomicon's internal array of tools, who was just looking for a way to get up to speed at a new job. It's also possible that it's the result of months of painstaking work by Neel Mehta, 6 of which were possibly spent with the status report of "All week long, I looked painstakingly through such such directories and didn't find any security issues", though I'd bet he didn't spend it on HN.For traditional feature development, a dishonest employee could take random code from the internet, rename functions and then check that into version control, and say they were working but instead they were surfing HN. (Stretching out the "Oh, there's some problem getting it to compile, I'm working on it." excuse for months is left as an exercise for the dishonest.)"Find and fix security bugs in software component X" is about as specific as "add a spell checker in software component X" and can be treated just the same. You break down the task into smaller components until you can visualize the code needed and then you write it. "Audit software component X for security risk A" is something a competent security researcher can be tasked to do and get results for.For instance, after a week of working on timing attacks against an OpenSSL key verification function, the developer assigned to it could say "Here are the numbers I got; the difference between how long it takes to validate this key, vs invalidate this key averages this much, so it's not vulnerable to key recovery because X, Y and Z. Additionally, here is the code harness I wrote to generate this data; I also modified the code so that was vulnerable to a timing attack, and here's my exploit code, which is why I know that the shipping code is not vulnerable to this class of attacks.Now if you think you can fake your way through six-months of status reports with that much detail, if not more, and also fake out some code for test-harnesses to back it up, all the while surfing HN instead of working, I'm all ears, but outside of vendors selling snake-oil magic security blankets, security research is a hard field to be in, where sometimes there's a lot of work for no payoff. The flip side of that is, that while Neel Mehta isn't due to become a household name, he is now quite famous in certain circles, and won't have any trouble finding a job if he leaves Google.