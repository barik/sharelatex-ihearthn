Safety Critical software is really about the confidence level in the software to function as intended and is really language agnostic.  This is why most Safety Critical projects focus on development and test practices.  You want to have a good warm and fuzzy that the product your outputting will work as intended when needed.  The traditional way to accomplish this is through rigorous design processes and robust testing.  So no one language has an advantage over another (unless real-time is a requirement which it often is) at the root level.  Over the years tools have been developed to help assist in testing and giving you that warm fuzzy feeling at the end.  Static analysis tools and code coverage tools are an example.  These tools tend to be more mature for traditional languages like C/C++ and ADA thus making them more popular for Safety Critical projects, but that's not to say another language that the development group was more familiar with wouldn't do better.  At the end of the day its all about your ability to detect defects and the systems ability to detect anomalies so the tool set that the development team thinks they can accomplish this the best with is the best choice.