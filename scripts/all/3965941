There is still a lot of performance slippage out there in high level languages (eg look at the need for assembly when people write raw codecs in C - x264 etc).  We are rapidly approaching the battery wall on mobile devices and the clock wall is already here.  ISA's may be extended to support dynamic languages more efficiently (tags, direct uop translation from user specified instructions) - but right now at a given TDP static execution is greener for many applications than dynamic, and history has shown us cpu vendors are unwilling to go down this path.Javascript is anything but efficient right now - some code paths are fast but with a high startup cost.  Look at the startup problem with Chrome/V8 for instance, or watch a nodejs application hit the GC wall with 800MB of live data.There are times when static is faster than dynamic and vice-versa.  Times when heavy upfront compilation is better than incremental run time analysis and vice-versa.  As the clock wall, TDP wall and process communication wall hits we need all the tools available to exploit maximum performance.