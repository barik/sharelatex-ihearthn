My experienced as an unofficial team lead of a few programmers with various experience (which I conclude that they were Jr. Programmers with a few years of lack of mentorship) was to do the following:1) Define structureSet some rules. Coding styles, check-in etiquette2) Find tools to limit mistakesStatic code analysis, automate build that breaks when #1 fails.3) Always on alertDo a lot of code reviews. A lot. Argue and fight over little things (variable naming convention, missing documentations, unclear code).Now this might not sit well with others so get ready:4) Become a "drill" sergeantI find that becoming the "bulldog" sometime works. You've got to become some sort of "drill" sergeant. People may dislike you at first but if the project is successful, they can hate you all the way to the exit door all they like.That was my experience. I made a concious decision to put the success of the project as the top priority. Even if it means breaking some bridges with other programmers. I hope they learn why I did those things in the future. If they don't, I won't quarrel or regret my action.5) Be nice on other occasionsI may be the biggest jerk during code-review and check-in commits but when my co-workers stuck, I'll be gladly help them even if it means I have to sit with them and do my overtime. This can gain you some respect after confrontation/intense debate/being a jerk.I always try to be friendly during office/release party. Give credit to the team, etc.