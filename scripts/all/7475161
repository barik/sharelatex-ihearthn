I'm sure it's more my poor choice of word, sorry about that. I just meant that if you're starting from scratch on a language there's a fairly large amount of non-useful stuff that must be done before it becomes valuable.I'm basically assuming that the only reason why you'd have enough business value in creating a new language comes from it either modeling something interesting or having a different semantic focus. Everything else is just wasted time then.Some examples:1. Documentation. How do people know what your language means? How do they know what happens when it breaks?2. Shaking out edge cases (much harder to do than debugging a program!)3. Syntax. Picking it. Parsing it. Ensuring it's complete and doesn't have weird edge cases.4. Compiler. Runtime. Parallel (!) runtime? Platform independence? Efficiency?5. Static analysis (type checking, memory analysis, nulls)6. Managing modules/files/packages7. Foreign calls8. Dependency managementAll of these are fun in their own right, but most businesses would have a hard time arguing that they're worth working on unless they've already got a language tied into their core value proposition. It's also important to mention that there exist tools to make some of them easier (bnfc, llvm, &c).But if you just start with an embedded DSL you can get right to the modeling or semantic issues by piggy-backing on the host language for (most of) 2, 3, 4, 5, 6, 7, and 8. If you prove that there's something valuable there and the host language is slowing you down then you can start to unembed it by building the "whole ecosystem".