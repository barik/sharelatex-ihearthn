I don't believe the kernel attack surface is as small as you seem to think, nor is the browser attack surface as large.Let's look at the kernel first.  Yes, the LOC numbers are bloated by bazillions of drivers, but even the core components that most people use are pretty large.  I just counted on Linux 3.16 and there are 1.2M lines in components I definitely use on one machine.  That's excluding anything in drivers/; include what I use from there and we're probably over 2M.  I don't think any reasonable person can claim that 2M lines is a small attack surface, so DJB is already wrong.Now let's look at Firefox.  Downloading 30.0 I see ~13M lines of C, C++ and JS.  Subtract at least 2M for the build system itself, build-time-selectable components, dev tools, and NSS which is part of the OS attack surface as well.  There are a bunch of other components that I'm sure most people never use, or even have explicitly disabled/blocked, but let's leave them in so we have 11M.  Hey, 11M is still larger than 2M, so you and DJB must be right.  Not so fast.  Attack surface is not just about LOC, and certainly not single-component LOC.  Let's look at some other confounding factors.* The exact same algorithm, with the exact same attack surface, can be expressed in more or less verbose form.  The Mozilla code is written in a more verbose style, but shouldn't necessarily get credit for that.  In many ways, that's likely to make auditing harder.* The kernel code is harder to audit.  There are fewer people even remotely able to do it, it contains more low-level trickery requiring expertise in a particular platform to analyze, it has more asynchronous/reentrant/etc. control flows that defeat static analysis, etc.  Line for line, analyzing kernel code is many times harder than analyzing Mozilla code.* Across an entire enterprise, the number of platforms and drivers that need to be considered for the kernel - from phones and embedded devices to servers and desktops - increases significantly.  So does the attack surface, and real security isn't about single machines in isolation.  The corresponding increase for Firefox is very small.* An operating system is more than a kernel.  Even if we only include the utilities that are essential to boot a system and do minimal work on it, we might blow right through that 11M mark.So yes, if you pick silly definitions and squint hard enough, DJB's statements about the two attack surfaces might be pedantically correct.  They're still not practically correct.  He frames it as "easy" vs. "hard" - a qualitative policy-driving distinction - and that's misleading at best.  Even if you can't accept that he got the relative difficulty exactly wrong, it's clear they are well within the same ballpark.  The supposed continental divide that DJB uses to justify the rest of his argument is in fact vapor-thin, and deserves derision.